use std::collections::HashMap;
use convert_case::{Case, Casing};
use chrono::Utc;

pub fn generate_header(author: &str, github_link: &str) -> String {
    let date = Utc::now().format("%Y-%m-%d").to_string();
    format!(
        "/*\n * This code was generated by rust_orm_gen.\n * GitHub: {}\n * Date: {}\n * Author: {}\n */\n\n",
        github_link, date, author
    )
}

pub fn generate_struct(table_name: &str, columns: HashMap<String, String>, author: &str, github_link: &str) -> String {
    let header = generate_header(author, github_link);
    let struct_name = table_name.to_case(Case::Pascal);
    let mut struct_def = format!("{}#[derive(Debug, Serialize, Deserialize)]\npub struct {} {{\n", header, struct_name);

    for (col_name, data_type) in columns {
        let rust_field_name = col_name.replace(" ", "_");
        let rust_type = match data_type.as_str() {
            "integer" | "serial" => "i32",
            "bigint" | "bigserial" => "i64",
            "smallint" => "i16",
            "boolean" => "bool",
            "text" | "varchar" | "char" => "String",
            "date" => "chrono::NaiveDate",
            "timestamp" => "chrono::NaiveDateTime",
            "timestamptz" | "timetz" => "chrono::DateTime<Utc>",
            "time" => "chrono::NaiveTime",
            "float4" => "f32",
            "float8" => "f64",
            "numeric" => "bigdecimal::BigDecimal",
            "uuid" => "uuid::Uuid",
            "json" | "jsonb" => "serde_json::Value",
            "bytea" => "Vec<u8>",
            _ => "String", // Default fallback
        };
        struct_def.push_str(&format!(
            "    #[serde(rename = \"{}\")] pub {}: {},\n",
            col_name, rust_field_name, rust_type
        ));
    }

    struct_def.push_str("}\n");
    struct_def
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::collections::HashSet;

    #[test]
    fn test_generate_struct() {
        let mut columns = HashMap::new();
        columns.insert("id".to_string(), "integer".to_string());
        columns.insert("name".to_string(), "text".to_string());
        columns.insert("zip code".to_string(), "text".to_string());

        let result = generate_struct("users", columns, "Tom Blanchard", "https://github.com/tomblanchard312/rust_orm_gen");
        let expected = r#"/*
 * This code was generated by rust_orm_gen.
 * GitHub: https://github.com/tomblanchard312/rust_orm_gen
 * Date: 2024-07-24
 * Author: Tom Blanchard
 */

#[derive(Debug, Serialize, Deserialize)]
pub struct Users {
    #[serde(rename = "id")] pub id: i32,
    #[serde(rename = "name")] pub name: String,
    #[serde(rename = "zip code")] pub zip_code: String,
}
"#;

        // Split the result and expected strings into lines and collect them into sets
        let result_lines: HashSet<_> = result.lines().collect();
        let expected_lines: HashSet<_> = expected.lines().collect();

        // Compare the sets of lines, ignoring order
        assert_eq!(result_lines, expected_lines);
    }
}
