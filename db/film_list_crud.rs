/*
 * This code was generated by rust_orm_gen.
 * GitHub: https://github.com/tomblanchard312/rust_orm_gen
 * Date: 2024-07-26
 * Author: Tom Blanchard
 */

use tokio_postgres::Client;
use crate::query_builder::QueryBuilder;

pub async fn create_film_list(client: &Client, entity: &FilmList) -> Result<FilmList, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::insert::<FilmList>()
        .values(&[&entity.actors, &entity.category, &entity.description, &entity.fid, &entity.length, &entity.price, &entity.rating, &entity.title])
        .returning(&["actors", "category", "description", "fid", "length", "price", "rating", "title"])
        .build();
    
    let row = client.query_one(&query, &params[..]).await?;
    
    Ok(FilmList {
        actors: row.get("actors"),
        category: row.get("category"),
        description: row.get("description"),
        fid: row.get("fid"),
        length: row.get("length"),
        price: row.get("price"),
        rating: row.get("rating"),
        title: row.get("title"),
    })
}

pub async fn get_film_list(client: &Client, id: i32) -> Result<FilmList, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::select::<FilmList>()
        .where_clause("id = $1")
        .bind_param(id)
        .build();
    
    let row = client.query_one(&query, &params[..]).await?;
    
    Ok(FilmList {
        actors: row.get("actors"),
        category: row.get("category"),
        description: row.get("description"),
        fid: row.get("fid"),
        length: row.get("length"),
        price: row.get("price"),
        rating: row.get("rating"),
        title: row.get("title"),
    })
}

pub async fn update_film_list(client: &Client, entity: &FilmList) -> Result<FilmList, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::update::<FilmList>()
        .set_values(&[("actors", &entity.actors), ("category", &entity.category), ("description", &entity.description), ("fid", &entity.fid), ("length", &entity.length), ("price", &entity.price), ("rating", &entity.rating), ("title", &entity.title)])
        .where_clause("id = $1")
        .bind_param(entity.id)
        .build();
    
    let row = client.query_one(&query, &params[..]).await?;
    
    Ok(FilmList {
        actors: row.get("actors"),
        category: row.get("category"),
        description: row.get("description"),
        fid: row.get("fid"),
        length: row.get("length"),
        price: row.get("price"),
        rating: row.get("rating"),
        title: row.get("title"),
    })
}

pub async fn delete_film_list(client: &Client, id: i32) -> Result<bool, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::delete::<FilmList>()
        .where_clause("id = $1")
        .bind_param(id)
        .build();
    
    let result = client.execute(&query, &params[..]).await?;
    
    Ok(result > 0)
}

pub async fn list_film_list(client: &Client, limit: Option<i64>, offset: Option<i64>) -> Result<Vec<FilmList>, tokio_postgres::Error> {
    let mut query_builder = QueryBuilder::select::<FilmList>();
    
    if let Some(limit_val) = limit {
        query_builder = query_builder.limit(limit_val as usize);
    }
    
    if let Some(offset_val) = offset {
        query_builder = query_builder.offset(offset_val as usize);
    }
    
    let (query, params) = query_builder.build();
    
    let rows = client.query(&query, &params[..]).await?;
    
    let entities = rows.into_iter().map(|row| FilmList {
        actors: row.get("actors"),
        category: row.get("category"),
        description: row.get("description"),
        fid: row.get("fid"),
        length: row.get("length"),
        price: row.get("price"),
        rating: row.get("rating"),
        title: row.get("title"),
    }).collect();
    
    Ok(entities)
}
