/*
 * This code was generated by rust_orm_gen.
 * GitHub: https://github.com/tomblanchard312/rust_orm_gen
 * Date: 2024-07-26
 * Author: Tom Blanchard
 */

use tokio_postgres::Client;
use crate::query_builder::QueryBuilder;

pub async fn create_actor_info(client: &Client, entity: &ActorInfo) -> Result<ActorInfo, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::insert::<ActorInfo>()
        .values(&[&entity.actor_id, &entity.film_info, &entity.first_name, &entity.last_name])
        .returning(&["actor_id", "film_info", "first_name", "last_name"])
        .build();
    
    let row = client.query_one(&query, &params[..]).await?;
    
    Ok(ActorInfo {
        actor_id: row.get("actor_id"),
        film_info: row.get("film_info"),
        first_name: row.get("first_name"),
        last_name: row.get("last_name"),
    })
}

pub async fn get_actor_info(client: &Client, id: i32) -> Result<ActorInfo, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::select::<ActorInfo>()
        .where_clause("id = $1")
        .bind_param(id)
        .build();
    
    let row = client.query_one(&query, &params[..]).await?;
    
    Ok(ActorInfo {
        actor_id: row.get("actor_id"),
        film_info: row.get("film_info"),
        first_name: row.get("first_name"),
        last_name: row.get("last_name"),
    })
}

pub async fn update_actor_info(client: &Client, entity: &ActorInfo) -> Result<ActorInfo, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::update::<ActorInfo>()
        .set_values(&[("actor_id", &entity.actor_id), ("film_info", &entity.film_info), ("first_name", &entity.first_name), ("last_name", &entity.last_name)])
        .where_clause("id = $1")
        .bind_param(entity.id)
        .build();
    
    let row = client.query_one(&query, &params[..]).await?;
    
    Ok(ActorInfo {
        actor_id: row.get("actor_id"),
        film_info: row.get("film_info"),
        first_name: row.get("first_name"),
        last_name: row.get("last_name"),
    })
}

pub async fn delete_actor_info(client: &Client, id: i32) -> Result<bool, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::delete::<ActorInfo>()
        .where_clause("id = $1")
        .bind_param(id)
        .build();
    
    let result = client.execute(&query, &params[..]).await?;
    
    Ok(result > 0)
}

pub async fn list_actor_info(client: &Client, limit: Option<i64>, offset: Option<i64>) -> Result<Vec<ActorInfo>, tokio_postgres::Error> {
    let mut query_builder = QueryBuilder::select::<ActorInfo>();
    
    if let Some(limit_val) = limit {
        query_builder = query_builder.limit(limit_val as usize);
    }
    
    if let Some(offset_val) = offset {
        query_builder = query_builder.offset(offset_val as usize);
    }
    
    let (query, params) = query_builder.build();
    
    let rows = client.query(&query, &params[..]).await?;
    
    let entities = rows.into_iter().map(|row| ActorInfo {
        actor_id: row.get("actor_id"),
        film_info: row.get("film_info"),
        first_name: row.get("first_name"),
        last_name: row.get("last_name"),
    }).collect();
    
    Ok(entities)
}
