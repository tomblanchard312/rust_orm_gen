/*
 * This code was generated by rust_orm_gen.
 * GitHub: https://github.com/tomblanchard312/rust_orm_gen
 * Date: 2024-07-26
 * Author: Tom Blanchard
 */

use tokio_postgres::Client;
use crate::query_builder::QueryBuilder;

pub async fn create_country(client: &Client, entity: &Country) -> Result<Country, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::insert::<Country>()
        .values(&[&entity.country, &entity.country_id, &entity.last_update])
        .returning(&["country", "country_id", "last_update"])
        .build();
    
    let row = client.query_one(&query, &params[..]).await?;
    
    Ok(Country {
        country: row.get("country"),
        country_id: row.get("country_id"),
        last_update: row.get("last_update"),
    })
}

pub async fn get_country(client: &Client, id: i32) -> Result<Country, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::select::<Country>()
        .where_clause("id = $1")
        .bind_param(id)
        .build();
    
    let row = client.query_one(&query, &params[..]).await?;
    
    Ok(Country {
        country: row.get("country"),
        country_id: row.get("country_id"),
        last_update: row.get("last_update"),
    })
}

pub async fn update_country(client: &Client, entity: &Country) -> Result<Country, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::update::<Country>()
        .set_values(&[("country", &entity.country), ("country_id", &entity.country_id), ("last_update", &entity.last_update)])
        .where_clause("id = $1")
        .bind_param(entity.id)
        .build();
    
    let row = client.query_one(&query, &params[..]).await?;
    
    Ok(Country {
        country: row.get("country"),
        country_id: row.get("country_id"),
        last_update: row.get("last_update"),
    })
}

pub async fn delete_country(client: &Client, id: i32) -> Result<bool, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::delete::<Country>()
        .where_clause("id = $1")
        .bind_param(id)
        .build();
    
    let result = client.execute(&query, &params[..]).await?;
    
    Ok(result > 0)
}

pub async fn list_country(client: &Client, limit: Option<i64>, offset: Option<i64>) -> Result<Vec<Country>, tokio_postgres::Error> {
    let mut query_builder = QueryBuilder::select::<Country>();
    
    if let Some(limit_val) = limit {
        query_builder = query_builder.limit(limit_val as usize);
    }
    
    if let Some(offset_val) = offset {
        query_builder = query_builder.offset(offset_val as usize);
    }
    
    let (query, params) = query_builder.build();
    
    let rows = client.query(&query, &params[..]).await?;
    
    let entities = rows.into_iter().map(|row| Country {
        country: row.get("country"),
        country_id: row.get("country_id"),
        last_update: row.get("last_update"),
    }).collect();
    
    Ok(entities)
}
