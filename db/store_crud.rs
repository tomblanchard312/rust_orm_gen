/*
 * This code was generated by rust_orm_gen.
 * GitHub: https://github.com/tomblanchard312/rust_orm_gen
 * Date: 2024-07-26
 * Author: Tom Blanchard
 */

use tokio_postgres::Client;
use crate::query_builder::QueryBuilder;

pub async fn create_store(client: &Client, entity: &Store) -> Result<Store, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::insert::<Store>()
        .values(&[&entity.address_id, &entity.last_update, &entity.manager_staff_id, &entity.store_id])
        .returning(&["address_id", "last_update", "manager_staff_id", "store_id"])
        .build();
    
    let row = client.query_one(&query, &params[..]).await?;
    
    Ok(Store {
        address_id: row.get("address_id"),
        last_update: row.get("last_update"),
        manager_staff_id: row.get("manager_staff_id"),
        store_id: row.get("store_id"),
    })
}

pub async fn get_store(client: &Client, id: i32) -> Result<Store, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::select::<Store>()
        .where_clause("id = $1")
        .bind_param(id)
        .build();
    
    let row = client.query_one(&query, &params[..]).await?;
    
    Ok(Store {
        address_id: row.get("address_id"),
        last_update: row.get("last_update"),
        manager_staff_id: row.get("manager_staff_id"),
        store_id: row.get("store_id"),
    })
}

pub async fn update_store(client: &Client, entity: &Store) -> Result<Store, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::update::<Store>()
        .set_values(&[("address_id", &entity.address_id), ("last_update", &entity.last_update), ("manager_staff_id", &entity.manager_staff_id), ("store_id", &entity.store_id)])
        .where_clause("id = $1")
        .bind_param(entity.id)
        .build();
    
    let row = client.query_one(&query, &params[..]).await?;
    
    Ok(Store {
        address_id: row.get("address_id"),
        last_update: row.get("last_update"),
        manager_staff_id: row.get("manager_staff_id"),
        store_id: row.get("store_id"),
    })
}

pub async fn delete_store(client: &Client, id: i32) -> Result<bool, tokio_postgres::Error> {
    let (query, params) = QueryBuilder::delete::<Store>()
        .where_clause("id = $1")
        .bind_param(id)
        .build();
    
    let result = client.execute(&query, &params[..]).await?;
    
    Ok(result > 0)
}

pub async fn list_store(client: &Client, limit: Option<i64>, offset: Option<i64>) -> Result<Vec<Store>, tokio_postgres::Error> {
    let mut query_builder = QueryBuilder::select::<Store>();
    
    if let Some(limit_val) = limit {
        query_builder = query_builder.limit(limit_val as usize);
    }
    
    if let Some(offset_val) = offset {
        query_builder = query_builder.offset(offset_val as usize);
    }
    
    let (query, params) = query_builder.build();
    
    let rows = client.query(&query, &params[..]).await?;
    
    let entities = rows.into_iter().map(|row| Store {
        address_id: row.get("address_id"),
        last_update: row.get("last_update"),
        manager_staff_id: row.get("manager_staff_id"),
        store_id: row.get("store_id"),
    }).collect();
    
    Ok(entities)
}
